{"version":3,"sources":["logo.svg","components/Camera.js","components/Haar.js","App.js","reportWebVitals.js","index.js"],"names":["Camera","videoRef","useRef","useState","detecting","setDetecting","canvasRef","timeRef","fpsRef","faceangleRef","forwardTimes","useEffect","a","faceapi","updateTimeStats","timeInMs","avgTimeInMs","concat","slice","reduce","total","t","length","time","current","fps","value","Math","round","getMeanPosition","l","map","x","y","b","detect","video","interval","setInterval","ts","Date","now","minConfidence","maxResults","withFaceLandmarks","result","canvas","ctx","getContext","clearRect","width","height","translate","scale","setTransform","dims","resizedDetections","right_eye","getRightEye","left_eye","getLeftEye","nose","getNose","getMouth","getJawOutline","min","ry","face_val","toFixed","drawDetections","drawFaceLandmarks","onClick","constraints","window","audio","navigator","mediaDevices","getUserMedia","then","stream","srcObject","play","catch","err","console","error","bind","this","getTracks","forEach","track","stop","clearInterval","id","ref","autoPlay","disabled","type","Haar","props","btnRef","React","createRef","script","document","createElement","src","async","onload","onOpenCvReady","body","appendChild","allsuspects","getElementsByTagName","i","getAttribute","indexOf","parentNode","removeChild","path","url","callback","request","XMLHttpRequest","open","responseType","ev","readyState","status","data","Uint8Array","response","cv","FS_createDataFile","log","send","createFileFromUrl","dst","Mat","CV_8UC4","gray","cap","VideoCapture","faces","RectVector","classifier","CascadeClassifier","eyeClassifier","streaming","getElementById","face_pose","minDelay","processVideo","begin","read","cvtColor","COLOR_RGBA2GRAY","detectMultiScale","Size","maxAreaFaceId","maxArea","size","face","get","area","point1","Point","point2","rectangle","innerText","imshow","dur","delay","max","toString","setTimeout","btn","onclick","facingMode","load","hidden","Component","App","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9e4d7dce.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useEffect, useRef, useState } from \"react\";\nimport * as faceapi from \"face-api.js\";\nimport \"./Camera.css\";\n\nfunction Camera() {\n  const videoRef = useRef(null);\n  const [detecting, setDetecting] = useState(0);\n  const canvasRef = useRef(null);\n  const timeRef = useRef(null);\n  const fpsRef = useRef(null);\n  const faceangleRef = useRef(null);\n  let forwardTimes = [];\n  useEffect(async () => {\n    await faceapi.loadSsdMobilenetv1Model(\"/models\");\n    await faceapi.loadFaceLandmarkTinyModel(\"/models\");\n    // await faceapi.loadFaceExpressionModel(\"/models\");\n    // await faceapi.loadMtcnnModel(\"/models\");\n    // await faceapi.loadFaceRecognitionModel(\"/models\");\n  }, []);\n\n  const getVideo = () => {\n    const constraints = (window.constraints = {\n      audio: false,\n      video: { width: 480, height: 480 },\n    });\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then((stream) => {\n        let video = videoRef.current;\n        video.srcObject = stream;\n        video.play();\n        detect();\n      })\n      .catch((err) => {\n        console.error(\"error:\", err);\n      });\n  };\n  const stopVideo = () => {\n    let video = videoRef.current;\n    let tracks = video.srcObject.getTracks();\n    tracks.forEach((track) => {\n      track.stop();\n    });\n    clearInterval(detecting);\n    const canvas = canvasRef.current;\n    canvas.getContext(\"2d\").clearRect(0, 0, canvas.width, canvas.height);\n  };\n  const updateTimeStats = (timeInMs) => {\n    forwardTimes = [timeInMs].concat(forwardTimes).slice(0, 30);\n    const avgTimeInMs =\n      forwardTimes.reduce((total, t) => total + t) / forwardTimes.length;\n    let time = timeRef.current;\n    let fps = fpsRef.current;\n    time.value = Math.round(avgTimeInMs) + \" ms\";\n    fps.value = faceapi.utils.round(1000 / avgTimeInMs) + \" fps\";\n  };\n  const getTop = (l) => {\n    return l.map((a) => a.y).reduce((a, b) => Math.min(a, b));\n  };\n\n  const getMeanPosition = (l) => {\n    return l\n      .map((a) => [a.x, a.y])\n      .reduce((a, b) => [a[0] + b[0], a[1] + b[1]])\n      .map((a) => a / l.length);\n  };\n  const detect = () => {\n    let video = videoRef.current;\n    let interval = setInterval(async () => {\n      const ts = Date.now();\n      // SSD face\n      const useTinyModel = true;\n      const minConfidence = 0.5;\n      const maxResults = 2;\n      const result = await faceapi\n        .detectSingleFace(\n          video,\n          new faceapi.SsdMobilenetv1Options({ minConfidence, maxResults })\n        )\n        .withFaceLandmarks(useTinyModel);\n      updateTimeStats(Date.now() - ts);\n      if (result) {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.translate(canvas.width, 0);\n        ctx.scale(-1, 1);\n        ctx.setTransform(-1, 0, 0, 1, canvas.width, 0);\n        const dims = faceapi.matchDimensions(canvas, video, true);\n        const resizedDetections = faceapi.resizeResults(result, dims);\n\n        let right_eye = getMeanPosition(\n          resizedDetections[\"landmarks\"].getRightEye()\n        );\n        let left_eye = getMeanPosition(\n          resizedDetections[\"landmarks\"].getLeftEye()\n        );\n        let nose = getMeanPosition(resizedDetections[\"landmarks\"].getNose());\n        let mouth = getMeanPosition(resizedDetections[\"landmarks\"].getMouth());\n        let jaw = getTop(resizedDetections[\"landmarks\"].getJawOutline());\n        // console.log(eye_left,eye_right, nose, mouth, jaw)\n        // let rx = (jaw - mouth) / resizedDetections[\"_box\"][\"_height\"];\n        let ry =\n          (left_eye[0] + (right_eye[0] - left_eye[0]) / 2 - nose[0]) /\n          resizedDetections[\"detection\"][\"_box\"][\"_width\"];\n        let face_val = ry.toFixed(2);\n        let faceangle = faceangleRef.current;\n\n        if (face_val < -0.06) {\n          //user moving in left direction\n          faceangle.value =\n            \"user is facing left side, face angle = \" + ry.toFixed(2);\n        } else if (face_val >= 0.07) {\n          //user moving in right direction\n          faceangle.value =\n            \"user is facing right side, face angle = \" + ry.toFixed(2);\n        } else {\n          //user face in facing front side of webcam\n          faceangle.value =\n            \"user is facing straight, face angle = \" + ry.toFixed(2);\n        }\n\n        faceapi.draw.drawDetections(canvas, resizedDetections);\n        faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);\n      }\n    }, 500);\n    setDetecting(interval);\n  };\n  return (\n    <div>\n      <button onClick={getVideo.bind(this)}>Start</button>\n      <button onClick={stopVideo.bind(this)}>Stop</button>\n      <div id=\"playground\">\n        <video ref={videoRef} autoPlay={true} id=\"videoplay\" />\n        <canvas ref={canvasRef} id=\"overlay\" />\n      </div>\n      <div id=\"fps_meter\">\n        <div>\n          <label>Time:</label>\n          <input disabled ref={timeRef} value=\"-\" id=\"time\" type=\"text\" />\n          <label>Estimated Fps:</label>\n          <input disabled ref={fpsRef} value=\"-\" id=\"fps\" type=\"text\" />\n        </div>\n        <div>\n          <label>Estimated Face Pose: </label>\n          <textarea\n            disabled\n            ref={faceangleRef}\n            value=\"-\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Camera;\n","import React from \"react\";\n\nclass Haar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.btnRef = React.createRef();\n        this.videoRef = React.createRef();\n        this.canvasRef = React.createRef();\n        this.fpsRef = React.createRef();\n    }\n    componentDidMount() {\n        const script = document.createElement(\"script\");\n        script.src = \"/opencv.js\";\n        script.async = true;\n        script.onload = () => this.onOpenCvReady();\n        document.body.appendChild(script);\n    }\n    componentWillUnmount() {\n        let scriptToremove = \"/opencv.js\";\n        let allsuspects = document.getElementsByTagName(\"script\");\n        for (let i = allsuspects.length; i >= 0; i--) {\n            if (\n                allsuspects[i] &&\n                allsuspects[i].getAttribute(\"src\") !== null &&\n                allsuspects[i]\n                    .getAttribute(\"src\")\n                    .indexOf(`${scriptToremove}`) !== -1\n            ) {\n                allsuspects[i].parentNode.removeChild(allsuspects[i]);\n            }\n        }\n    }\n    createFileFromUrl(path, url, callback) {\n        let request = new XMLHttpRequest();\n        request.open(\"GET\", url, true);\n        request.responseType = \"arraybuffer\";\n        request.onload = function (ev) {\n            if (request.readyState === 4) {\n                if (request.status === 200) {\n                    let data = new Uint8Array(request.response);\n                    window.cv.FS_createDataFile(\n                        \"/\",\n                        path,\n                        data,\n                        true,\n                        false,\n                        false\n                    );\n                    callback();\n                } else {\n                    console.log(\n                        \"Failed to load \" + url + \" status: \" + request.status\n                    );\n                }\n            }\n        };\n        request.send();\n    }\n    onOpenCvReady() {\n        const cv = window.cv;\n        cv[\"onRuntimeInitialized\"] = () => {\n            console.log(\"OpenCV.js is ready!\", cv);\n            this.createFileFromUrl(\n                \"face.xml\",\n                \"models/haarcascade_frontalface_default.xml\",\n                () => {\n                    console.log(\"OK\");\n                }\n            );\n            // this.createFileFromUrl(\n            //     \"eye.xml\",\n            //     \"models/haarcascade_eye.xml\",\n            //     () => {\n            //         console.log(\"OK\");\n            //     }\n            // );\n\n            let video = this.videoRef.current;\n\n            let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n            let dst = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n            let gray = new cv.Mat();\n            let cap = new cv.VideoCapture(video);\n            let faces = new cv.RectVector();\n            let eyes = new cv.RectVector();\n            let classifier = new cv.CascadeClassifier();\n            let eyeClassifier = new cv.CascadeClassifier();\n            let streaming = false;\n            const fps = document.getElementById(\"fps\");\n            const face_pose = document.getElementById(\"face-pose\");\n            const maxFPS = 30;\n            const minDelay = 1000 / maxFPS;\n\n            function processVideo() {\n                try {\n                    if (!streaming) {\n                        return;\n                    }\n                    let begin = Date.now();\n                    // start processing.\n                    cap.read(dst);\n                    // src.copyTo(dst);\n                    cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);\n                    // detect faces.\n                    classifier.detectMultiScale(gray, faces, 1.2, 3, 0, new cv.Size(70));\n                    // draw faces.\n                    let maxAreaFaceId = -1\n                    let maxArea = 0\n                    for (let i = 0; i < faces.size(); ++i) {\n                        let face = faces.get(i);\n                        let area = face.width * face.height\n                        if (area > maxArea) {\n                            maxArea = area\n                            maxAreaFaceId = i\n                        }\n                    }\n                    if (maxAreaFaceId != -1) {\n                        let face = faces.get(maxAreaFaceId);\n                        let point1 = new cv.Point(face.x, face.y);\n                        let point2 = new cv.Point(face.x + face.width, face.y + face.height);\n                        cv.rectangle(dst, point1, point2, [0, 255, 0, 255], 2);\n                        let halfFace = {\n                            x: face.x,\n                            y: face.y,\n                            width: face.width,\n                            height: Math.round(face.height/2)\n                        }\n                        face_pose.innerText = \"Straight, face angle not calculated \";\n                        // let maxEyeWidth = Math.round(face.width/3)\n                        // eyeClassifier.detectMultiScale(gray.roi(halfFace), eyes, 1.2, 5, 0, new cv.Size(30), new cv.Size(maxEyeWidth));\n\n                        // for (let j = 0; j < eyes.size(); ++j) {\n                        //     let point1 = new cv.Point(eyes.get(j).x, eyes.get(j).y);\n                        //     let point2 = new cv.Point(eyes.get(j).x + eyes.get(j).width,\n                        //                             eyes.get(j).y + eyes.get(j).height);\n                        //     cv.rectangle(dst.roi(halfFace), point1, point2, [255, 255, 0, 255], 2);\n                        // }\n                    } else {\n                        face_pose.innerText = \"not detected\"\n                    }\n                    cv.imshow('canvasOutput', dst);\n                    // schedule the next one.\n                    let dur = Date.now() - begin\n                    let delay = minDelay - dur\n                    // console.log(dur, 1000/dur)\n                    fps.innerText = (1000 / Math.max(minDelay, dur)).toFixed(2).toString()\n                    setTimeout(processVideo, delay);\n                } catch (err) {\n                    console.log(err)\n                    // utils.printError(err);\n                }\n            };\n            const btn = this.btnRef.current;\n            btn.onclick = run\n\n            function run() {\n                streaming = !streaming\n                if (streaming) {\n                    navigator.mediaDevices.getUserMedia({ video: {width: 480, height: 480, facingMode: \"user\"}, audio: false })\n                    .then(function(stream) {\n                        video.srcObject = stream;\n                        video.play();\n                    })\n                    .catch(function(err) {\n                        console.log(\"An error occurred! \" + err);\n                    });\n                    classifier.load(\"/face.xml\")\n                    eyeClassifier.load(\"/eye.xml\")\n                    processVideo()\n                    btn.innerText = \"Stop\"\n                } else {\n                    btn.innerText = \"Start\"\n                }\n            }\n            // schedule the first one.\n            // setTimeout(processVideo, 0);\n        };\n    }\n    render() {\n        return (\n            <div>\n                <div>\n                    <div>\n                        <div>\n                            <button id=\"start-or-stop\" ref={this.btnRef}>\n                                Start\n                            </button>\n                            <video\n                                id=\"input-video\"\n                                width=\"480\"\n                                height=\"480\"\n                                hidden\n                                ref={this.videoRef}\n                            ></video>\n                            <canvas\n                                id=\"canvasOutput\"\n                                width=\"480\"\n                                height=\"480\"\n                                ref={this.canvasRef}\n                            ></canvas>\n                            <p>\n                                FPS: <span id=\"fps\">0</span>\n                            </p>\n                            <p>\n                                Face pose: <span id=\"face-pose\">no face</span>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Haar;\n","import logo from './logo.svg';\nimport './App.css';\nimport Camera from './components/Camera';\nimport Haar from './components/Haar';\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n    <Routes>\n      <Route path=\"/\" element={<Camera />} />\n      <Route path=\"/haar\" element={<Haar />} />\n    </Routes>\n  </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}